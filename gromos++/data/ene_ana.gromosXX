TITLE
  XX Library file for ene_ana
END
ENERTRJ
# block definition for the energy trajectory file.
# which is specified by the input flag en_files of program ene_ana.
#
# Use keyword 'block' to specify the blocks
#             'subblock' to specify name and dimensions of a set of data
#             'size' to specify a size that should be read in from the file
#                    this size can be used as dimension specification
#                    in a subblock definition. Using the prefix 'matrix_'
#                    with such a definition will expand the size N to
#                    N*(N+1)/2
#
# Following is the definition for a gromosXX energy trajectory
#
  block TIMESTEP
    subblock TIME 2 1
  block ENERGY03
    subblock ENER 16 1
    size NUM_BATHS
    subblock KINENER NUM_BATHS 3
    size NUM_ENERGY_GROUPS
    subblock BONDED NUM_ENERGY_GROUPS 4
    subblock NONBONDED matrix_NUM_ENERGY_GROUPS 2
    subblock SPECIAL NUM_ENERGY_GROUPS 7
  block VOLUMEPRESSURE03
    subblock MASS 1 1
    size NUM_BATHS
    subblock TEMPERATURE  NUM_BATHS 4
    subblock VOLUME 10 1
    subblock PRESSURE 30 1
END
FRENERTRJ
# block definition for the free energy trajectory file.
# which is specified by the input flag fr_files of program ene_ana.
#
# syntax as for the ENERTRJ definition
#
# Following is the definition for a gromosXX free energy trajectory.
#
  block TIMESTEP
    subblock TIME 2 1
  block FREEENERDERIVS03
    subblock RLAM 1 1
    subblock FREEENER 16 1
    size NUM_BATHS
    subblock FREEKINENER NUM_BATHS 3
    size NUM_ENERGY_GROUPS
    subblock FREEBONDED NUM_ENERGY_GROUPS 4
    subblock FREENONBONDED matrix_NUM_ENERGY_GROUPS 2
    subblock FREESPECIAL NUM_ENERGY_GROUPS 7
END
VARIABLES
# Here you can define variables to be calculated by the program ene_ana
# In principal the program refers to the blocknames you have defined above,
# accessing individual element using array indices (one- or two-dimensional)
#
# Predefined as well is the Boltzmann constant (as BOLTZ = 0.00831441) and
# the MASS which (if not present in the energy trajectory) will be calculated
# from the topology (if inputflag @topo is given).
#
# Additional properties can be defined here as a direct mapping of a known 
# property or as an expression of such properties. Make sure that variables
# and operators are always seperated by spaces. Multi-line expressions are
# allowed.
#
# Examples that work with the standard gromos96 definition are
#          given below and are actually standardly define if no library
#          file is specified.
time   = TIME[2]
dvdl   = FREEENER[3]
totene = ENER[1]
totkin = ENER[2]
totpot = ENER[3]
totspec = totene - totpot - totkin
totbond = ENER[4]
totangle = ENER[5]
totimproper = ENER[6]
totdihedral = ENER[7]
totlj = ENER[8]
totcrf = ENER[9]
totconstraint = ENER[10]
totposres = ENER[11]
totdisres = ENER[12]
totdihres = ENER[13]
totjval = ENER[14]
totle = ENER[15]
totpi = ENER[16]
# calculate the pressure in atm.
pressu = PRESSURE[1] * 16.388453
boxvol = VOLUME[1]
# calculate the density in kg/m^3
densit = MASS[1] * 1.66056 / VOLUME[1]
# free energy
totfren = FREEENER[1]
#
# temperature (2 baths)
solutemp2 = TEMPERATURE[1][1]
solvtemp2 = TEMPERATURE[2][1]
#
# example for 3 baths, first internal / rotational
# second molecular translational temperature
irtemp3 = TEMPERATURE[1][1]
mttemp3 = TEMPERATURE[2][1]
solvtemp3 = TEMPERATURE[3][1]
#
# example: 2 energy groups
#  - solute - solute
elj_uu = NONBONDED[1][1]
ecrf_uu = NONBONDED[1][2]
e_uu = elj_uu + ecrf_uu
#  - solute - solvent
elj_uv = NONBONDED[2][1]
ecrf_uv = NONBONDED[2][2]
e_uv = elj_uv + ecrf_uv
#  - solvent - solvent
elj_vv = NONBONDED[3][1]
ecrf_vv = NONBONDED[3][2]
e_vv = elj_vv + ecrf_vv
#
# Example: to calculate the heat of vaporization from a simulation at 300 K
#          One could also define the number of degrees of freedom and calculate
#          the actual temperature at every time step.
# TEMP = 300.0 
# GASENER = 0
# NUMMOL = 512
# hvap = GASENER - ENER[8] / NUMMOL + BOLTZ * TEMP
#
END

